# adding number of survivors to age x, from conditional probability of death
if (("qx" %in% names(tab)) & !("lx" %in% names(tab))) {
tab$lx <- 100000 * cumprod(c(1, 1 - utils::head(tab$qx,-1) ))
}
# =================== lx -> Lx ====================
# adding person years lived at age x, from number of survivors to age x
if (("lx" %in% names(tab)) & !("Lx" %in% names(tab))) {
w1 <- c( 0.2, rep(0.5, nrow(tab)-1) )
tab$Lx <- ( w1 * tab$lx +
(1 - w1) * c( utils::tail(tab$lx,-1), 0) ) * tab$agewidth
tab$Lx[nrow(tab)] <- tab$lx[nrow(tab)] / tab$mx[nrow(tab)]
}
# =================== Lx -> Tx ====================
# adding total number of years lived  from x, from person years lived at age x
if (("Lx" %in% names(tab)) & !("Tx" %in% names(tab))) {
tab$Tx <- rev( cumsum( rev(tab$Lx) ) )
}
# =================== lx, Tx -> ex ====================
# adding total life expectancy, from total number of years lived and numbers surviving to age x
if (("lx" %in% names(tab)) & ("Tx" %in% names(tab)) & !("ex" %in% names(tab))) {
tab$ex <- tab$Tx / tab$lx
}
# =================== Lx, pix -> DFLx ====================
# adding person years lived without disability (DFLx), from person years lived at age x (Lx) and proportion with disability (pix)
if (("Lx" %in% names(tab)) & ("pix" %in% names(tab)) & !("DFLx" %in% names(tab))) {
tab$DFLx <- tab$Lx * (1 - tab$pix)
}
# =================== DFLx -> DFTx ====================
# adding total years lived without disability from age x (DFTx), from person years lived without disability (DFLx)
if (("DFLx" %in% names(tab)) & !("DFTx" %in% names(tab))) {
tab$DFTx <- rev( cumsum( rev(tab$DFLx) ) )
}
# =================== lx, DFTx -> DFLEx ====================
# adding disability-free life expectancy (DFLEx), from total years lived without disability from age x (DFTx) and numbers surviving to age x
if (("lx" %in% names(tab)) & ("DFTx" %in% names(tab)) & !("DFLEx" %in% names(tab))) {
tab$DFLEx <- tab$DFTx / tab$lx
}
# =================== DFLEx <-> DFLx ====================
# adding in-disability life expectancy (DLEx), from life expectancy (ex) and disability-free life expectancy (DFLEx)
if (("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("DLEx" %in% names(tab))) {
tab$DLEx <- tab$ex - tab$DFLEx
}
# --- alternative : adding disability-free life expectancy (DFLEx), from life expectancy (ex) and in-disability life expectancy (DLEx)
if (!("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("DLEx" %in% names(tab))) {
tab$DFLEx <- tab$ex - tab$DLEx
}
# =================== DFLEx <-> pctDFLEx ====================
# adding proportion of life spent disability-free (pctDFLEx), from ratio of DFLE and LE at each age x
if (("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("pctDFLEx" %in% names(tab))) {
tab$pctDFLEx <- 100 * tab$DFLEx / tab$ex
}
# --- alternative : adding disability-free life expectancy (DFLEx), from proportion of life spent disability-free (pctDFLEx) and life-expectancy at each age x
if (!("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("pctDFLEx" %in% names(tab))) {
tab$DFLEx <- tab$pctDFLEx/100 * tab$ex
if (!("DLEx" %in% names(tab))) { tab$DLEx <- tab$ex - tab$DFLEx }
}
# =================== lx, Lx, DFLEx -> pix (& DFLx, DFTx) ====================
# --- alternative : adding prevalences (pix), from DFLEx
if (("lx" %in% names(tab)) & ("Lx" %in% names(tab)) & ("DFLEx" %in% names(tab)) & !("pix" %in% names(tab)) & !("DFLx" %in% names(tab)) & !("DFTx" %in% names(tab))) {
tab$DFTx <-  tab$DFLEx * tab$lx
tab$DFLx <- tab$DFTx - c( tail(tab$DFTx,-1) , 0 )
tab$pix <-  ( 1 - tab$DFLx / tab$Lx )
}
# add row names
# to be done
# returns enriched dataset
return(tab)
}
tabDFLEref <- CompleteDFLEtable(tabref)
View(tabDFLEref)
View(tabDFLEref)
projections <- prevalenceForecast( qmortref, qmortproj , "cstDFLE")
View(projections)
View(projections)
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
View(projections)
View(projections)
View(qmortref)
View(qmortref)
prevalenceForecast <- function(tabref, tabproj, hypo) {
# add : controls
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
# DFLE, DLE and pctDFLE for reference year
tabDFLEref <- CompleteDFLEtable(tabref)
# forecasted prevalences
tabproj <- tabproj %>%
filter(age %in% c( unique(tabref$age))) %>% ###
left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
tabDFLEproj <- CompleteDFLEtable( tabproj )
rbind( tabDFLEref[,c(vardim,"year","pix","ex","DFLEx","DLEx","pctDFLEx")],
tabDFLEproj[,c(vardim,"year","pix","ex","DFLEx","DLEx","pctDFLEx")] )
}
prevalenceForecast <- function(tabref, tabproj, hypo) {
# add : controls
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
# DFLE, DLE and pctDFLE for reference year
tabDFLEref <- CompleteDFLEtable(tabref)
# forecasted prevalences
tabproj <- tabproj %>%
filter(age %in% c( unique(tabref$age))) %>% ###
left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
tabDFLEproj <- CompleteDFLEtable( tabproj )
rbind( tabDFLEref[,c(vardim,"year","pix","ex","DFLEx","DLEx","pctDFLEx")],
tabDFLEproj[,c(vardim,"year","pix","ex","DFLEx","DLEx","pctDFLEx")] )
}
runApp('inst/shiny-examples/projprevalence')
View(donnees)
View(donnees)
View(projections)
View(projections)
View(projections)
View(projections)
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
?'%>%'
shiny::runApp('inst/shiny-examples/projprevalence')
library(shinydashboard)
runApp('inst/shiny-examples/projprevalence')
library(healthexpectancies)
runApp('inst/shiny-examples/projprevalence')
library(plotly)
runApp('inst/shiny-examples/projprevalence')
library(tidyverse)
library(shiny)
runApp('inst/shiny-examples/projprevalence')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(plotly)
runApp('inst/shiny-examples/projprevalence')
library(healthexpectancies)
runApp('inst/shiny-examples/projprevalence')
?renderHtml
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
?icon
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
sullivan_description
description_sullivan
shiny::runApp('inst/shiny-examples/projprevalence')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(plotly)
library(healthexpectancies)
runApp('inst/shiny-examples/projprevalence')
runExample()
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
remotes::install_github("patrickaubert/healthexpectancies",ref='main')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(plotly)
library(healthexpectancies)
healthexpectancies::runExample()
prevApaMale <- read_excel("data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G12")
library(readxl)
library(tidyverse)
prevApaMale <- read_excel("data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G12")
View(prevApaMale)
View(prevApaMale)
prevApaFemale <- read_excel("data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D13:G20")
prevApaMale <- read_excel("data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G12") %>%
mutate(sex = "male",
agebracket = cut(age, breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE))
prevApaFemale <- read_excel("data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D13:G20") %>%
mutate(sex = "female",
agebracket = cut(age, breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE))
View(prevApaFemale)
View(prevApaFemale)
prevApaMale <- read_excel("data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G12")
View(prevApaMale)
View(prevApaMale)
View(prevApaFemale)
View(prevApaFemale)
prevApaMale <- read_excel("data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20")
View(prevApaMale)
View(prevApaMale)
prevApa <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
mutate(sex = c( rep("male",8), rep("female",8) ) )
View(prevApa)
View(prevApa)
prevApa <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
mutate(sex = c( rep("male",8), rep("female",8) ) ,
agebracket = cut(c( seq(60,95,5), seq(60,95,5)  ) , breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE))
View(prevApa)
View(prevApa)
runExample(à)
runExample()
prevApa <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
mutate(sex = c( rep("male",8), rep("female",8) ) ,
agebracket = cut(c( seq(60,95,5), seq(60,95,5)  ) , breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE)) %>%
pivot_longer(cols = -c(sex,agebracket), names_to="typepresta",values_to="prevalence")
prevApa <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
select(-...1) %>%
mutate(sex = c( rep("male",8), rep("female",8) ) ,
agebracket = cut(c( seq(60,95,5), seq(60,95,5)  ) , breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE)) %>%
pivot_longer(cols = -c(sex,agebracket), names_to="typepresta",values_to="prevalence")
View(prevApa)
View(prevApa)
prevApa <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
select(-...1) %>%
mutate(sex = c( rep("male",8), rep("female",8) ) ,
agebracket = cut(c( seq(60,95,5), seq(60,95,5)  ) , breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE)) %>%
pivot_longer(cols = -c(sex,agebracket), names_to="typepresta",values_to="prevalence") %>%
mutate(typepresta = recode(typepresta, "TOTAL" = "APA domicile+établissement"))
View(prevApa)
View(prevApa)
FRDreesAPA2017 <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
select(-...1) %>%
mutate(sex = c( rep("male",8), rep("female",8) ) ,
agebracket = cut(c( seq(60,95,5), seq(60,95,5)  ) , breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE)) %>%
pivot_longer(cols = -c(sex,agebracket), names_to="typepresta",values_to="prevalence") %>%
mutate(typepresta = recode(typepresta, "TOTAL" = "APA domicile+établissement"))
View(FRDreesAPA2017)
View(FRDreesAPA2017)
usethis::use_data(FRInseeMortalityForecast2016,
FRInseePopulationForecast2016,
FRDreesVQSsurvey2014,
FRDreesAPA2017,
sullivan,
description_sullivan,
overwrite = T)
FRDreesAPA2017 <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
select(-...1) %>%
mutate(sex = c( rep("male",8), rep("female",8) ) ,
age = c( seq(60,95,5), seq(60,95,5) ) ,
agebracket = cut( age , breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE)) %>%
pivot_longer(cols = -c(sex,agebracket), names_to="typepresta",values_to="prevalence") %>%
mutate(typepresta = recode(typepresta, "TOTAL" = "APA domicile+établissement"))
FRDreesAPA2017 <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
select(-...1) %>%
mutate(sex = c( rep("male",8), rep("female",8) ) ,
age = c( seq(60,95,5), seq(60,95,5) ) ,
agebracket = cut( age , breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE)) %>%
pivot_longer(cols = -c(sex,age,agebracket), names_to="typepresta",values_to="prevalence") %>%
mutate(typepresta = recode(typepresta, "TOTAL" = "APA domicile+établissement"))
View(FRDreesAPA2017)
View(FRDreesAPA2017)
FRDreesAPA2017 <- read_excel(
"data-raw/aas19_15_les_be_ne_ficiaires_et_les_de_penses_d_apa_srok.xlsx",
sheet = "G01",
range = "D4:G20") %>%
select(-...1) %>%
mutate(sex = c( rep("male",8), rep("female",8) ) ,
age = c( seq(60,95,5), seq(60,95,5) ) ,
agebracket = cut( age , breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE)) %>%
pivot_longer(cols = -c(sex,age,agebracket), names_to="typepresta",values_to="prevalence") %>%
mutate(typepresta = recode(typepresta, "TOTAL" = "APA domicile+établissement"))
# ===================================================================================
usethis::use_data(FRInseeMortalityForecast2016,
FRInseePopulationForecast2016,
FRDreesVQSsurvey2014,
FRDreesAPA2017,
sullivan,
description_sullivan,
overwrite = T)
View(FRDreesAPA2017)
View(FRDreesAPA2017)
=140/710
140/710
unique(FRDreesAPA2017$typepresta)
names(FRDreesVQSsurvey2014)
names(FRDreesAPA2017)
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
names(FRDreesAPA2017)
unique(FRDreesAPA2017$typepresta)
runApp('inst/shiny-examples/projprevalence')
?CompleteDFLEtable
?prevalenceForecast
description_sullivan
trac <- FRInseeMortalityForecast2016[FRInseeMortalityForecast2016$year %in% c(2013,2015,2020,2030),]
View(trac)
View(trac)
truc <- CompleteDFLEtable( FRInseeMortalityForecast2016[FRInseeMortalityForecast2016$year %in% c(2013,2015,2020,2030),] )
View(truc)
View(truc)
CompleteDFLEtable <- function(tab) {
# remove columns with missing values
tab <- tab[,colSums(is.na(tab))==0]
# if 'sex' and/or 'year' and/or 'categ' are in the input dataset, calculations is made for each values of these 2 variables
# NB: 'categ' is an undefinite category variable (to be defined by user)
if ("sex" %in% names(tab)) {
classsex <- unique(tab$sex)
#tab <- tab %>% mutate(sex = as.factor(sex))
tab$sex <- as.factor(tab$sex)
if (NROW(classsex)>1)  {
bysex <- function(s){ CompleteDFLEtable(tab[tab$sex == s,]) }
return( do.call(rbind,lapply(classsex,bysex)) )
}
}
if ("categ" %in% names(tab)) {
classcateg <- unique(tab$categ)
#tab <- tab %>% mutate(categ = as.factor(categ))
tab$categ <- as.factor(tab$categ)
if (NROW(classcateg)>1)  {
bycateg <- function(cat){ CompleteDFLEtable(tab[tab$categ == cat,]) }
return( do.call(rbind,lapply(classcateg,bycateg)) )
}
}
if ("year" %in% names(tab)) {
classyear <- unique(tab$year)
#tab <- tab %>% mutate(year = as.numeric(year))
tab$year <- as.numeric(tab$year)
if (NROW(classyear)>1)  {
byyear <- function(y){ CompleteDFLEtable(tab[tab$year == y,]) }
return( do.call(rbind,lapply(classyear,byyear)) )
}
}
# creates no variable if age is missing in the input dataset
# NB: in the sullivan manuel, 'x' means 'age'
if (!("age" %in% names(tab)) & ("x" %in% names(tab))) { tab$age <- tab$x }
if (!("age" %in% names(tab))) { return(tab) }
tab <- tab %>% mutate(age = as.numeric(age))
tab <- tab[order(tab$age),]
# adding agewidth : should be equal to 1 if all ages are in the input dataset
if (("age" %in% names(tab)) & !("agewidth" %in% names(tab))) {
tab$agewidth <- c( tail(tab$age,-1), (tail(tab$age,1)+1)) - tab$age
}
# adding central death rate (mx), from Mid-year population (Px) and	No. deaths (Dx)
if (("Px" %in% names(tab)) & ("Dx" %in% names(tab)) & !("mx" %in% names(tab))) {
tab$mx <- tab$Dx / tab$Px
}
# =================== mx <-> qx ====================
# adding conditional probability of death (qx), from central death rate (mx)
if (("mx" %in% names(tab)) & !("qx" %in% names(tab))) {
tab$qx <- tab$mx * tab$agewidth / (1 + 0.5 * tab$agewidth * tab$mx)
}
# --- alternative : adding central death rate (mx), from conditional probability of death (qx)
if (("qx" %in% names(tab)) & !("mx" %in% names(tab))) {
tab$mx <- tab$qx / tab$agewidth / (1 - 0.5 * tab$qx)
}
# =================== qx -> lx ====================
# adding number of survivors to age x, from conditional probability of death
if (("qx" %in% names(tab)) & !("lx" %in% names(tab))) {
tab$lx <- 100000 * cumprod(c(1, 1 - utils::head(tab$qx,-1) ))
}
# =================== lx -> Lx ====================
# adding person years lived at age x, from number of survivors to age x
if (("lx" %in% names(tab)) & !("Lx" %in% names(tab))) {
w1 <- c( 0.2, rep(0.5, nrow(tab)-1) )
tab$Lx <- ( w1 * tab$lx +
(1 - w1) * c( utils::tail(tab$lx,-1), 0) ) * tab$agewidth
tab$Lx[nrow(tab)] <- tab$lx[nrow(tab)] / tab$mx[nrow(tab)]
}
# =================== Lx -> Tx ====================
# adding total number of years lived  from x, from person years lived at age x
if (("Lx" %in% names(tab)) & !("Tx" %in% names(tab))) {
tab$Tx <- rev( cumsum( rev(tab$Lx) ) )
}
# =================== lx, Tx -> ex ====================
# adding total life expectancy, from total number of years lived and numbers surviving to age x
if (("lx" %in% names(tab)) & ("Tx" %in% names(tab)) & !("ex" %in% names(tab))) {
tab$ex <- tab$Tx / tab$lx
}
# =================== Lx, pix -> DFLx ====================
# adding person years lived without disability (DFLx), from person years lived at age x (Lx) and proportion with disability (pix)
if (("Lx" %in% names(tab)) & ("pix" %in% names(tab)) & !("DFLx" %in% names(tab))) {
tab$DFLx <- tab$Lx * (1 - tab$pix)
}
# =================== DFLx -> DFTx ====================
# adding total years lived without disability from age x (DFTx), from person years lived without disability (DFLx)
if (("DFLx" %in% names(tab)) & !("DFTx" %in% names(tab))) {
tab$DFTx <- rev( cumsum( rev(tab$DFLx) ) )
}
# =================== lx, DFTx -> DFLEx ====================
# adding disability-free life expectancy (DFLEx), from total years lived without disability from age x (DFTx) and numbers surviving to age x
if (("lx" %in% names(tab)) & ("DFTx" %in% names(tab)) & !("DFLEx" %in% names(tab))) {
tab$DFLEx <- tab$DFTx / tab$lx
}
# =================== DFLEx <-> DFLx ====================
# adding in-disability life expectancy (DLEx), from life expectancy (ex) and disability-free life expectancy (DFLEx)
if (("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("DLEx" %in% names(tab))) {
tab$DLEx <- tab$ex - tab$DFLEx
}
# --- alternative : adding disability-free life expectancy (DFLEx), from life expectancy (ex) and in-disability life expectancy (DLEx)
if (!("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("DLEx" %in% names(tab))) {
tab$DFLEx <- tab$ex - tab$DLEx
}
# =================== DFLEx <-> pctDFLEx ====================
# adding proportion of life spent disability-free (pctDFLEx), from ratio of DFLE and LE at each age x
if (("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("pctDFLEx" %in% names(tab))) {
tab$pctDFLEx <- 100 * tab$DFLEx / tab$ex
}
# --- alternative : adding disability-free life expectancy (DFLEx), from proportion of life spent disability-free (pctDFLEx) and life-expectancy at each age x
if (!("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("pctDFLEx" %in% names(tab))) {
tab$DFLEx <- tab$pctDFLEx/100 * tab$ex
if (!("DLEx" %in% names(tab))) { tab$DLEx <- tab$ex - tab$DFLEx }
}
# =================== lx, Lx, DFLEx -> pix (& DFLx, DFTx) ====================
# --- alternative : adding prevalences (pix), from DFLEx
if (("lx" %in% names(tab)) & ("Lx" %in% names(tab)) & ("DFLEx" %in% names(tab)) & !("pix" %in% names(tab)) & !("DFLx" %in% names(tab)) & !("DFTx" %in% names(tab))) {
tab$DFTx <-  tab$DFLEx * tab$lx
tab$DFLx <- tab$DFTx - c( tail(tab$DFTx,-1) , 0 )
tab$pix <-  ( 1 - tab$DFLx / tab$Lx )
}
# add row names
# to be done
# returns enriched dataset
return(tab)
}
tric < CompleteDFLEtable( FRInseeMortalityForecast2016[FRInseeMortalityForecast2016$year %in% c(2013,2015,2020,2030),] )
tric <- CompleteDFLEtable( FRInseeMortalityForecast2016[FRInseeMortalityForecast2016$year %in% c(2013,2015,2020,2030),] )
View(tric)
View(tric)
rsconnect::deployApp(server = "shinyapps.io")
getwd()
?deployApp
rsconnect::deployApp(appDir = "C:/Users/PA/Documents/R/Projets/healthexpectancies/inst/shiny-examples/projprevalence/", server = "shinyapps.io")
rsconnect::deployApp(appDir = "C:/Users/PA/Documents/R/Projets/healthexpectancies/inst/shiny-examples/projprevalence", server = "shinyapps.io")
rsconnect::deployApp(appDir = "C:/Users/PA/Documents/R/Projets/healthexpectancies/inst/shiny-examples/projprevalence", server = "shinyapps.io")
install.packages("plyr")
rsconnect::deployApp(appDir = "C:/Users/PA/Documents/R/Projets/healthexpectancies/inst/shiny-examples/projprevalence", server = "shinyapps.io")
rsconnect::deployApp(appDir = "healthexpectancies/inst/shiny-examples/projprevalence", server = "shinyapps.io")
?dashboardPage
?dashboardpage
library(tidyverse)
library(dplyr)
library(shiny)
library(shinydashboard)
library(plotly)
library(healthexpectancies)
?dashboardPage
rsconnect::deployApp(appDir = "C:/Users/PA/Documents/R/Projets/healthexpectancies/inst/shiny-examples/projprevalence", server = "shinyapps.io")
runApp('inst/shiny-examples/projprevalence')
