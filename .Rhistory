filter(indicateur == "prev.approx") %>%
rename(pix = prevalence) %>%
select(sex,age,pix)
qmort2014 <- FRInseeMortalityForecast2016 %>%
select(year,sex,age,qx) %>%
filter(age >= 60, year %in% c(2014) ) %>%
#mutate(mx = qx) %>%
left_join(prev2014, by = c("sex","age")) %>%
filter(!is.na(pix), !is.na(qx))
View(qmort2014)
View(qmort2014)
qmortproj <- FRInseeMortalityForecast2016 %>%
select(year,sex,age,qx) %>%
filter(age >= 60, year %in% c( vyear[vyear != 2014] ) )
View(qmortproj)
View(qmortproj)
projections <- prevalenceForecast( qmort2014, qmortproj , input$optionProj)
projections <- prevalenceForecast( qmort2014, qmortproj , "cstDFLE")
tabref<-qmort2014
tabproj<-qmortproj
hypo<-"cstDFLE"
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
tabDFLEref <- CompleteDFLEtable(tabref)
tabDFLEproj <- CompleteDFLEtable( tabproj %>% left_join(tabDFLEref[,c(vardim,varkeep)] , by = vardim) )
View(tabDFLEproj)
View(tabDFLEproj)
truc <- tabproj %>% left_join(tabDFLEref[,c(vardim,varkeep)] , by = vardim)
View(truc)
View(truc)
View(qmort2014)
View(qmort2014)
View(qmortproj)
View(qmortproj)
tabproj <- tabproj %>% left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
View(tabproj)
View(tabproj)
tabproj<-qmortproj
tabproj <- tabproj %>%
filter(age %in% c( unique(tabref$age))) %>%
left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
tabDFLEproj <- CompleteDFLEtable( )
tabDFLEproj <- CompleteDFLEtable( tabproj )
View(tabDFLEproj)
View(tabDFLEproj)
prevalenceForecast <- function(tabref, tabproj, hypo) {
# add : controls
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
# DFLE, DLE and pctDFLE for reference year
tabDFLEref <- CompleteDFLEtable(tabref)
# forecasted prevalences
tabproj <- tabproj %>%
filter(age %in% c( unique(tabref$age))) %>%
left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
tabDFLEproj <- CompleteDFLEtable( tabproj )
rbind( tabDFLEref[,c(vardim,"year","pix","DFLEx","DLEx","pctDFLEx")],
tabDFLEproj[,c(vardim,"year","pix","DFLEx","DLEx","pctDFLEx")] )
}
runApp('inst/shiny-examples/projprevalence')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(plotly)
library(healthexpectancies)
runApp('inst/shiny-examples/projprevalence')
remotes::install_github("patrickaubert/healthexpectancies",ref='main')
library(healthexpectancies)
runApp('inst/shiny-examples/projprevalence')
prevalence_to_polynomial <- function (age, prevalence, weight = rep(1,NROW(prevalence)) ) {
if (NROW(age) != NROW(prevalence)) { stop("Error: Different size of input vectors") }
tab <- data.frame(prevalence) %>%
mutate(a = pmin(100,as.numeric(age)), a2 = a^2, a3 = a^3, a4 = a^4)
fitted_models <- tab %>%
do(model = lm(prevalence ~ a + a2 + a3 + a4 , data = ., weights = weight))
fitted_models$model[[1]]$fitted.values
}
prevalenceForecast <- function(tabref, tabproj, hypo) {
# add : controls
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
# DFLE, DLE and pctDFLE for reference year
tabDFLEref <- CompleteDFLEtable(tabref)
# forecasted prevalences
tabproj <- tabproj %>%
filter(age %in% c( unique(tabref$age))) %>% ###
left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
tabDFLEproj <- CompleteDFLEtable( tabproj )
rbind( tabDFLEref[,c(vardim,"year","pix","DFLEx","DLEx","pctDFLEx")],
tabDFLEproj[,c(vardim,"year","pix","DFLEx","DLEx","pctDFLEx")] )
}
prevalenceForecast <- function(tabref, tabproj, hypo) {
# add : controls
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
# DFLE, DLE and pctDFLE for reference year
tabDFLEref <- CompleteDFLEtable(tabref)
# forecasted prevalences
tabproj <- tabproj %>%
filter(age %in% c( unique(tabref$age))) %>% ###
left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
tabDFLEproj <- CompleteDFLEtable( tabproj )
rbind( tabDFLEref[,c(vardim,"year","pix","DFLEx","DLEx","pctDFLEx")],
tabDFLEproj[,c(vardim,"year","pix","DFLEx","DLEx","pctDFLEx")] )
}
runApp('inst/shiny-examples/projprevalence')
truc <- sullivan
View(truc)
View(truc)
truc <- FRInseeMortalityForecast2016
View(truc)
View(truc)
truc <- FRInseePopulationForecast2016
View(truc)
View(truc)
truc <- FRDreesVQSsurvey2014
View(truc)
View(truc)
vyear <- unique( c(2014, 2020, 2025, 2030, 2035, 2040, 2050) )
vyear <- vyear[order(vyear)]
donnees <- FRInseePopulationForecast2016 %>%
rename(age = age0101) %>%
mutate(year = as.numeric(year),
age = as.numeric(age),
sex = as.factor(sex)) %>%
mutate(year = year-1)
View(donnees)
View(donnees)
donnees <- FRInseePopulationForecast2016
View(donnees)
View(donnees)
donnees <- FRInseePopulationForecast2016 %>%
rename(age = age0101) %>%
mutate(year = as.numeric(year),
age = as.numeric( recode(age, "108 et +" = "108", age) ),
sex = as.factor(sex)) %>%
mutate(year = year-1)
donnees <- FRInseePopulationForecast2016 %>%
rename(age = age0101) %>%
mutate(year = as.numeric(year),
age = as.numeric( recode(age, "108 et +" = "108") ),
sex = as.factor(sex)) %>%
mutate(year = year-1)
View(donnees)
View(donnees)
donnees <- FRInseePopulationForecast2016 %>%
rename(age = age0101) %>%
mutate(year = as.numeric(year),
age = recode(age, "108 et +" = "108"),
age = as.numeric( age ),
sex = as.factor(sex)) %>%
mutate(year = year-1)
View(donnees)
View(donnees)
recode(c("1","2","3"), "3" = "4")
donnees <- FRInseePopulationForecast2016 %>%
rename(age = age0101) %>%
mutate(year = as.numeric(year),
age = recode(age, "108 et +" = "108"))
View(donnees)
View(donnees)
donnees <- FRInseePopulationForecast2016 %>%
rename(age = age0101)
View(donnees)
View(donnees)
donnees <- FRInseePopulationForecast2016
View(donnees)
View(donnees)
library(readxl)
library(tidyverse)
popMale <- read_excel("data-raw/irsocprojpop1370_FECcentESPcentMIGcent.xls",
sheet = "populationH",
range = "A5:BG126")
names(popMale) <- c("age0101", tail(names(popMale),-1) )
View(popMale)
View(popMale)
popMale <- read_excel("data-raw/irsocprojpop1370_FECcentESPcentMIGcent.xls",
sheet = "populationH",
range = "A5:BG114")
names(popMale) <- c("age0101", tail(names(popMale),-1) )
View(popMale)
View(popMale)
popMale <- popMale %>%
pivot_longer(-c("age0101"), names_to = "year", values_to = "popx")
popFemale <- read_excel("data-raw/irsocprojpop1370_FECcentESPcentMIGcent.xls",
sheet = "populationF",
range = "A5:BG114")
View(popFemale)
View(popFemale)
popFemale <- read_excel("data-raw/irsocprojpop1370_FECcentESPcentMIGcent.xls",
sheet = "populationF",
range = "A5:BG114")
names(popFemale) <- c("age0101", tail(names(popFemale),-1) )
popFemale <- popFemale %>%
pivot_longer(-c("age0101"), names_to = "year", values_to = "popx")
FRInseePopulationForecast2016 <- rbind(
popFemale %>% mutate(sex = "female"),
popMale %>% mutate(sex = "male")
) %>%
mutate(age = recode(age, "108 et +" = "108"),
year = as.numeric(year),
age = as.numeric(age),
sex = as.factor(sex))
FRInseePopulationForecast2016 <- rbind(
popFemale %>% mutate(sex = "female"),
popMale %>% mutate(sex = "male")
) %>%
mutate(age0101 = recode(age0101, "108 et +" = "108"),
year = as.numeric(year),
age0101 = as.numeric(age0101),
sex = as.factor(sex))
View(FRInseePopulationForecast2016)
View(FRInseePopulationForecast2016)
usethis::use_data(FRInseeMortalityForecast2016,
FRInseePopulationForecast2016,
FRDreesVQSsurvey2014,
sullivan,
description_sullivan,
overwrite = T)
donnees <- FRInseePopulationForecast2016 %>%
rename(age = age0101) %>%
mutate(year = as.numeric(year),
age = as.numeric( age ),
sex = as.factor(sex)) %>%
mutate(year = year-1)
View(donnees)
View(donnees)
donneesregr <- donnees %>%
mutate(agebracket = cut(age, breaks = c(seq(60,95,5),Inf), include.lowest = TRUE, right = FALSE)) %>%
filter(year==2014, age>=60) %>%
left_join( FRDreesVQSsurvey2014  %>% filter(limitationtype == "GALI" ) %>% select(-age),
by = c("sex","agebracket") ) %>%
rename(prevalence.ref = prevalence)
View(donneesregr)
View(donneesregr)
prevalencesref <- donneesregr %>% group_by(sex) %>%
mutate(prev.approx = case_when(
input$approxPrev ~ prevalence_to_polynomial(age, prevalence.ref, weight=popx),
!input$approxPrev ~ prevalence.ref) ) %>%
ungroup() %>%
select(sex, age, prev.approx, prevalence.ref) %>%
pivot_longer(cols=-c(sex,age),
names_to = "indicateur",
values_to = "prevalence")
prevalencesref <- donneesregr %>% group_by(sex) %>%
mutate(prev.approx = case_when(
TRUE ~ prevalence_to_polynomial(age, prevalence.ref, weight=popx),
FALSE ~ prevalence.ref) ) %>%
ungroup() %>%
select(sex, age, prev.approx, prevalence.ref) %>%
pivot_longer(cols=-c(sex,age),
names_to = "indicateur",
values_to = "prevalence")
View(prevalencesref)
View(prevalencesref)
prev2014 <- prevalencesref %>%
filter(indicateur == "prev.approx") %>%
rename(pix = prevalence) %>%
select(sex,age,pix)
prevref <- prevalencesref %>%
filter(indicateur == "prev.approx") %>%
rename(pix = prevalence) %>%
select(sex,age,pix)
View(prevref)
View(prevref)
qmortref <- FRInseeMortalityForecast2016 %>%
select(year,sex,age,qx) %>%
filter(age >= 60, year %in% c(2014) ) %>%
#mutate(mx = qx) %>%
left_join(prevref, by = c("sex","age")) %>%
filter(!is.na(pix), !is.na(qx))
View(qmortref)
View(qmortref)
qmortproj <- FRInseeMortalityForecast2016 %>%
select(year,sex,age,qx) %>%
filter(age >= 60, year %in% c( vyear[vyear != 2014] ) )
projections <- prevalenceForecast( qmort2014, qmortproj , input$optionProj)
projections <- prevalenceForecast( qmortref, qmortproj , input$optionProj)
projections <- prevalenceForecast( qmortref, qmortproj , "cstDFLE")
tabref <- qmortref
tabprojk <- qmortproj
hypo <- "cstDFLE"
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
vardim
tabproj <- qmortproj
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
vardim
varkeep
tabDFLEref <- CompleteDFLEtable(tabref)
CompleteDFLEtable <- function(tab) {
# remove columns with missing values
tab <- tab[,colSums(is.na(tab))==0]
# if 'sex' and/or 'year' and/or 'categ' are in the input dataset, calculations is made for each values of these 2 variables
# NB: 'categ' is an undefinite category variable (to be defined by user)
if ("sex" %in% names(tab)) {
classsex <- unique(tab$sex)
tab <- tab %>% mutate(sex = as.factor(sex))
if (NROW(classsex)>1)  {
bysex <- function(s){ CompleteDFLEtable(tab[tab$sex == s,]) }
return( do.call(rbind,lapply(classsex,bysex)) )
}
}
if ("categ" %in% names(tab)) {
classcateg <- unique(tab$categ)
tab <- tab %>% mutate(categ = as.factor(categ))
if (NROW(classcateg)>1)  {
bycateg <- function(cat){ CompleteDFLEtable(tab[tab$categ == cat,]) }
return( do.call(rbind,lapply(classcateg,bycateg)) )
}
}
if ("year" %in% names(tab)) {
classyear <- unique(tab$year)
tab <- tab %>% mutate(year = as.numeric(year))
if (NROW(classyear)>1)  {
byyear <- function(y){ CompleteDFLEtable(tab[tab$year == y,]) }
return( do.call(rbind,lapply(classyear,byyear)) )
}
}
# creates no variable if age is missing in the input dataset
# NB: in the sullivan manuel, 'x' means 'age'
if (!("age" %in% names(tab)) & ("x" %in% names(tab))) { tab$age <- tab$x }
if (!("age" %in% names(tab))) { return(tab) }
tab <- tab %>% mutate(age = as.numeric(age))
tab <- tab[order(tab$age),]
# adding agewidth : should be equal to 1 if all ages are in the input dataset
if (("age" %in% names(tab)) & !("agewidth" %in% names(tab))) {
tab$agewidth <- c( tail(tab$age,-1), (tail(tab$age,1)+1)) - tab$age
}
# adding central death rate (mx), from Mid-year population (Px) and	No. deaths (Dx)
if (("Px" %in% names(tab)) & ("Dx" %in% names(tab)) & !("mx" %in% names(tab))) {
tab$mx <- tab$Dx / tab$Px
}
# =================== mx <-> qx ====================
# adding conditional probability of death (qx), from central death rate (mx)
if (("mx" %in% names(tab)) & !("qx" %in% names(tab))) {
tab$qx <- tab$mx * tab$agewidth / (1 + 0.5 * tab$agewidth * tab$mx)
}
# --- alternative : adding central death rate (mx), from conditional probability of death (qx)
if (("qx" %in% names(tab)) & !("mx" %in% names(tab))) {
tab$mx <- tab$qx / tab$agewidth / (1 - 0.5 * tab$qx)
}
# =================== qx -> lx ====================
# adding number of survivors to age x, from conditional probability of death
if (("qx" %in% names(tab)) & !("lx" %in% names(tab))) {
tab$lx <- 100000 * cumprod(c(1, 1 - utils::head(tab$qx,-1) ))
}
# =================== lx -> Lx ====================
# adding person years lived at age x, from number of survivors to age x
if (("lx" %in% names(tab)) & !("Lx" %in% names(tab))) {
w1 <- c( 0.2, rep(0.5, nrow(tab)-1) )
tab$Lx <- ( w1 * tab$lx +
(1 - w1) * c( utils::tail(tab$lx,-1), 0) ) * tab$agewidth
tab$Lx[nrow(tab)] <- tab$lx[nrow(tab)] / tab$mx[nrow(tab)]
}
# =================== Lx -> Tx ====================
# adding total number of years lived  from x, from person years lived at age x
if (("Lx" %in% names(tab)) & !("Tx" %in% names(tab))) {
tab$Tx <- rev( cumsum( rev(tab$Lx) ) )
}
# =================== lx, Tx -> ex ====================
# adding total life expectancy, from total number of years lived and numbers surviving to age x
if (("lx" %in% names(tab)) & ("Tx" %in% names(tab)) & !("ex" %in% names(tab))) {
tab$ex <- tab$Tx / tab$lx
}
# =================== Lx, pix -> DFLx ====================
# adding person years lived without disability (DFLx), from person years lived at age x (Lx) and proportion with disability (pix)
if (("Lx" %in% names(tab)) & ("pix" %in% names(tab)) & !("DFLx" %in% names(tab))) {
tab$DFLx <- tab$Lx * (1 - tab$pix)
}
# =================== DFLx -> DFTx ====================
# adding total years lived without disability from age x (DFTx), from person years lived without disability (DFLx)
if (("DFLx" %in% names(tab)) & !("DFTx" %in% names(tab))) {
tab$DFTx <- rev( cumsum( rev(tab$DFLx) ) )
}
# =================== lx, DFTx -> DFLEx ====================
# adding disability-free life expectancy (DFLEx), from total years lived without disability from age x (DFTx) and numbers surviving to age x
if (("lx" %in% names(tab)) & ("DFTx" %in% names(tab)) & !("DFLEx" %in% names(tab))) {
tab$DFLEx <- tab$DFTx / tab$lx
}
# =================== DFLEx <-> DFLx ====================
# adding in-disability life expectancy (DLEx), from life expectancy (ex) and disability-free life expectancy (DFLEx)
if (("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("DLEx" %in% names(tab))) {
tab$DLEx <- tab$ex - tab$DFLEx
}
# --- alternative : adding disability-free life expectancy (DFLEx), from life expectancy (ex) and in-disability life expectancy (DLEx)
if (!("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("DLEx" %in% names(tab))) {
tab$DFLEx <- tab$ex - tab$DLEx
}
# =================== DFLEx <-> pctDFLEx ====================
# adding proportion of life spent disability-free (pctDFLEx), from ratio of DFLE and LE at each age x
if (("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("pctDFLEx" %in% names(tab))) {
tab$pctDFLEx <- 100 * tab$DFLEx / tab$ex
}
# --- alternative : adding disability-free life expectancy (DFLEx), from proportion of life spent disability-free (pctDFLEx) and life-expectancy at each age x
if (!("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("pctDFLEx" %in% names(tab))) {
tab$DFLEx <- tab$pctDFLEx/100 * tab$ex
if (!("DLEx" %in% names(tab))) { tab$DLEx <- tab$ex - tab$DFLEx }
}
# =================== lx, Lx, DFLEx -> pix (& DFLx, DFTx) ====================
# --- alternative : adding prevalences (pix), from DFLEx
if (("lx" %in% names(tab)) & ("Lx" %in% names(tab)) & ("DFLEx" %in% names(tab)) & !("pix" %in% names(tab)) & !("DFLx" %in% names(tab)) & !("DFTx" %in% names(tab))) {
tab$DFTx <-  tab$DFLEx * tab$lx
tab$DFLx <- tab$DFTx - c( tail(tab$DFTx,-1) , 0 )
tab$pix <-  ( 1 - tab$DFLx / tab$Lx )
}
# add row names
# to be done
# returns enriched dataset
return(tab)
}
tabDFLEref <- CompleteDFLEtable(tabref)
View(tabDFLEref)
View(tabDFLEref)
projections <- prevalenceForecast( qmortref, qmortproj , "cstDFLE")
View(projections)
View(projections)
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
View(projections)
View(projections)
View(qmortref)
View(qmortref)
prevalenceForecast <- function(tabref, tabproj, hypo) {
# add : controls
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
# DFLE, DLE and pctDFLE for reference year
tabDFLEref <- CompleteDFLEtable(tabref)
# forecasted prevalences
tabproj <- tabproj %>%
filter(age %in% c( unique(tabref$age))) %>% ###
left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
tabDFLEproj <- CompleteDFLEtable( tabproj )
rbind( tabDFLEref[,c(vardim,"year","pix","ex","DFLEx","DLEx","pctDFLEx")],
tabDFLEproj[,c(vardim,"year","pix","ex","DFLEx","DLEx","pctDFLEx")] )
}
prevalenceForecast <- function(tabref, tabproj, hypo) {
# add : controls
vardim <- intersect( c("sex","age","categ") , intersect(names(tabref), names(tabproj)) )
varkeep <- recode(hypo,
"cstDFLE" = "DFLEx",
"cstDLE" = "DLEx",
"cstPctDFLE" = "pctDFLEx",
"cstPrev" = "pix")
# DFLE, DLE and pctDFLE for reference year
tabDFLEref <- CompleteDFLEtable(tabref)
# forecasted prevalences
tabproj <- tabproj %>%
filter(age %in% c( unique(tabref$age))) %>% ###
left_join(tabDFLEref[,c(vardim,varkeep)] , by = c(vardim) )
tabDFLEproj <- CompleteDFLEtable( tabproj )
rbind( tabDFLEref[,c(vardim,"year","pix","ex","DFLEx","DLEx","pctDFLEx")],
tabDFLEproj[,c(vardim,"year","pix","ex","DFLEx","DLEx","pctDFLEx")] )
}
runApp('inst/shiny-examples/projprevalence')
View(donnees)
View(donnees)
View(projections)
View(projections)
View(projections)
View(projections)
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
runApp('inst/shiny-examples/projprevalence')
?'%>%'
shiny::runApp('inst/shiny-examples/projprevalence')
library(shinydashboard)
runApp('inst/shiny-examples/projprevalence')
library(healthexpectancies)
runApp('inst/shiny-examples/projprevalence')
library(plotly)
runApp('inst/shiny-examples/projprevalence')
library(tidyverse)
library(shiny)
runApp('inst/shiny-examples/projprevalence')
